package issues

import main.Issue

class Issue2 : Issue {
/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
* */

    val fibTable = mutableMapOf(
        1 to 1,
        2 to 2
    )

    fun getFibValue(num: Int): Int {
        val result = fibTable[num]
        return result ?: throw Exception("Value of $num is not calculated")
    }

    fun evalFibValue(num: Int): Int {
        var res: Int
        try {
            res = getFibValue(num)
        } catch (e: Exception) {
            val prev1 = getFibValue(num-1)
            val prev2 = getFibValue(num-2)
            res = prev1+prev2
        }
        return res
    }

    fun evalAndSaveFibValue(num: Int): Unit {
        if (fibTable[num] == null) {
            fibTable[num] = evalFibValue(num)
        }
    }

    override fun run() {
        val max = 4_000_000
        val isEven: (Int) -> Boolean = {x: Int -> x % 2 == 0}
        var accum = 0

        var lastFib = 0
        var num = 1
        while (lastFib <= max) {
            evalAndSaveFibValue(num)
            lastFib = getFibValue(num)
            num++

            if (isEven(lastFib)) {
                accum += lastFib
            }
        }
        //TimingResult: 4613732
        println(accum)
    }
}